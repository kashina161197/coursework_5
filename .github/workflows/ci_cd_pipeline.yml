name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Remove all Docker images
        run: |
          docker rmi $(docker images -q) || true

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my_app:${{ github.sha }} .

      - name: Push Docker image in Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my_app:${{ github.sha }}

      - name: Проверка созданых образова
        run: sudo docker images

  deploy:
      runs-on: ubuntu-latest
      needs: tests
      steps:
          - name: Set up SSH
            uses: webfactory/ssh-agent@v0.9.0
            with:
                ssh-private-key: ${{ secrets.SSH_KEY }}
          - name: Copy project files to server
            run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  cd ${{ secrets.DEPLOY_DIR }}
                  git pull
                EOF
          - name: Reassembly
            run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  cd ${{ secrets.DEPLOY_DIR }}
                  docker compose down
                  docker compose up -d --build
                EOF

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Set up SSH
#        run: |
#          sudo apt-get install -y sshpass  # Установка sshpass
#          echo "${{ secrets.SSH_PASSWORD }}" > password.txt  # Сохранение пароля во временный файл
#          chmod 600 password.txt  # Установка прав доступа к файлу
#
#      - name: Add SSH host key
#        run: |
#          mkdir -p ~/.ssh
#          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
#
#      - name: Copy project files to server
#        run: |
#          sshpass -f password.txt rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
#
#      - name: Deploy to Server
#        run: |
#          sshpass -f password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#          sleep 10
#          sudo apt-get update
#          sudo apt-get install -y docker.io
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my_app:${{ github.sha }}
#
#          if [ "$(sudo docker ps -q -f name=my_app)" ]; then
#          sudo docker stop my_app
#          sudo docker rm my_app
#          fi
#
#          docker run -d --name my_app -p 8080:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/my_app:${{ github.sha }}
#          EOF